/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { Context } from './context';
import { AccnameOptions } from './options';
/**
 * A reference to the rules outlined in the accname spec.
 */
export declare type Rule = '2A' | '2B' | '2C' | '2D' | '2E' | '2F' | '2G' | '2I';
/** Type signature for the computeTextAlternative function. */
export declare type ComputeTextAlternative = (node: Node, options: AccnameOptions, context: Context) => ComputationDetails;
/**
 * We pass the main function to compute textAlternative to avoid having build
 * time circular references between files
 */
export declare type RuleImpl = (node: Node, options: AccnameOptions, context: Context, textAlternative: ComputeTextAlternative) => string | null;
/**
 * Represents a step in the accessible name computation.
 */
export interface ComputationStep {
    rule: Rule;
    node: Node;
    text: string;
}
/**
 * Provides details about the computation of some accessible name, such as
 * the Nodes used and rules applied during computation.
 */
export interface ComputationDetails {
    name: string;
    steps: ComputationStep[];
}
/**
 * @param node - The node whose text alternative will be calculated
 * @param  context - Additional information relevant to the text alternative
 * computation for node. Optional paramater is 'getDefaultContext' by default.
 * @return - The text alternative for node
 */
export declare function computeTextAlternative(node: Node, options?: Partial<AccnameOptions>, context?: Context): ComputationDetails;
/**
 * Compute the text alternative without trimming leading and trailing
 * whitespace.
 */
declare function computeRawTextAlternative(node: Node, options?: AccnameOptions, context?: Context): ComputationDetails;
export declare const TEST_ONLY: {
    computeRawTextAlternative: typeof computeRawTextAlternative;
};
export {};
//# sourceMappingURL=compute_text_alternative.d.ts.map