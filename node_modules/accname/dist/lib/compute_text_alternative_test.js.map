{"version":3,"file":"compute_text_alternative_test.js","sourceRoot":"","sources":["../../src/lib/compute_text_alternative_test.ts"],"names":[],"mappings":"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","sourcesContent":["import {html, render} from 'lit';\n\nimport {customMatchers} from '../testing/custom_matchers';\n\nimport {computeTextAlternative} from './compute_text_alternative';\n\ndescribe('The computeTextAlternative function', () => {\n  beforeAll(() => {\n    jasmine.addMatchers(customMatchers);\n  });\n\n  let container: HTMLElement;\n  beforeEach(() => {\n    container = document.createElement('div');\n    document.body.appendChild(container);\n  });\n\n  afterEach(() => {\n    document.body.removeChild(container);\n  });\n\n  it('returns text alternative of element referenced with aria-labelledby',\n     () => {\n       expect(`\n          <div id=\"fee\" hidden>world</div>\n          <div id=\"bee\">\n            Hello\n            <div aria-labelledby=\"fee\"></div>\n          </div>\n          <div id=\"test\" aria-labelledby=\"bee\"></div>\n      `).toHaveTextAlernative('Hello world');\n     });\n\n  it('uses aria-labelledby references when computing \\'name from content\\' nodes',\n     () => {\n       expect(`\n        <div id=\"bar\">Hello world</div>\n        <button id=\"test\">\n          <div aria-labelledby=\"bar\">hi</div>\n        </button>\n      `).toHaveTextAlernative('Hello world');\n     });\n\n  it('prefers input value to aria-label for embedded controls', () => {\n    expect(`\n        <div id=\"test\" role=\"link\">\n          Say hello <input aria-label=\"100\" type=\"range\" value=\"5\" /> times\n        </div>\n      `).toHaveTextAlernative('Say hello 5 times');\n  });\n\n  it('returns correct computation details for simple button input', () => {\n    render(html`<button id=\"test\">Hello world</button>`, container);\n    const elem = document.getElementById('test')!;\n    expect(computeTextAlternative(elem)).toEqual({\n      name: 'Hello world',\n      steps: [\n        {rule: '2G', node: elem.childNodes[0], text: 'Hello world'},\n        {rule: '2F', node: elem, text: 'Hello world'},\n      ],\n    });\n  });\n\n  it('returns correct computation details for aria-labelledby references',\n     () => {\n       render(\n           html`\n        <div id=\"test\" aria-labelledby=\"bar\">Hi</div>\n        <div id=\"bar\">Hello world</div>\n      `,\n           container);\n       const elem1 = document.getElementById('test')!;\n       const elem2 = document.getElementById('bar')!;\n       expect(computeTextAlternative(elem1)).toEqual({\n         name: 'Hello world',\n         steps: [\n           {rule: '2G', node: elem2.childNodes[0], text: 'Hello world'},\n           {rule: '2F', node: elem2, text: 'Hello world'},\n           {rule: '2B', node: elem1, text: 'Hello world'},\n         ],\n       });\n     });\n\n  it('check title attribute for name when subtree is empty', () => {\n    expect(`<input type=\"checkbox\" title=\"Hello world\" id=\"test\" />`)\n        .toHaveTextAlernative('Hello world');\n  });\n\n  it('check title attribute for name when subtree is hidden', () => {\n    expect(`\n        <button title=\"Hello world\" id=\"test\">\n          <div aria-hidden=\"true\">Invisible text</div>\n        </button>\n      `).toHaveTextAlernative('Hello world');\n  });\n\n  it('allows name from content through elements with 0 height and width',\n     () => {\n       expect(`\n          <div role=\"button\" id=\"test\">\n            <span><div>Hello world</div></span>\n          </div>\n        `).toHaveTextAlernative('Hello world');\n     });\n\n  it('doesnt add whitespace between inline elements (span in this case)',\n     () => {\n       expect(`<h1 id=\"test\"><span>E</span><span>E</span></h1>`)\n           .toHaveTextAlernative('EE');\n     });\n\n  it('does add whitespace if inline elements are on different lines', () => {\n    expect(`\n        <h1 id=\"test\">\n          <span>E</span>\n          <span>E</span>\n        </h1>\n      `).toHaveTextAlernative('E E');\n  });\n\n  it('can handle elements in iframes', async () => {\n    render(html`<iframe srcdoc=\"<body></body>\"></iframe>`, container);\n    const iframe = container.querySelector('iframe')!;\n    await iframeLoadedPromise(iframe);\n    const iframeDocument = iframe.contentWindow!.document;\n    render(html`<button>Inside iframe</button>`, iframeDocument.body);\n    const button = iframeDocument.querySelector('button')!;\n    expect(button).toHaveTextAlernative('Inside iframe');\n  });\n\n  it('can handle Unicode BiDi control characters', () => {\n    render(\n        html`\n        <button class=\"target\" aria-label=\"يلا&#x202C; foo &#x202A;يلا bar &#x202B;يلا\">foo</button>\n        <button class=\"target\">يلا&#x202C; foo &#x202A;يلا bar &#x202B;يلا</button>\n\n        <select class=\"target\">\n          <option>يلا&#x202C;</option>\n          <option>foo</option>\n          <option>&#x202A;يلا</option>\n          <option>bar</option>\n          <option>&#x202B;يلا</option>\n        </select>\n        `,\n        container);\n    const targets = document.getElementsByClassName('target');\n    expect(targets.length).toBeGreaterThan(0);\n    for (const elem of targets) {\n      expect(elem).toHaveTextAlernative(\n          'يلا\\u202C foo \\u202Aيلا bar \\u202Bيلا');\n    }\n\n    const options = document.querySelectorAll('option');\n    expect(options.length).toBeGreaterThan(0);\n    for (const elem of options) {\n      expect(elem).toHaveTextAlernative(elem.textContent!);\n    }\n  });\n});\n\nasync function iframeLoadedPromise(iframe: HTMLIFrameElement) {\n  return new Promise((resolve) => {\n    iframe.addEventListener('load', resolve, {once: true});\n  });\n}\n"]}