{"version":3,"file":"context.js","sourceRoot":"","sources":["../../src/lib/context.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAoDH;;GAEG;AACH,SAAgB,iBAAiB;IAC/B,OAAO;QACL,SAAS,EAAE;YACT,YAAY,EAAE,EAAE;YAChB,KAAK,EAAE,EAAE;SACV;KACF,CAAC;AACJ,CAAC;AAPD,8CAOC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ComputationStep} from './compute_text_alternative';\n\n/**\n * This interface will be used to pass additional information\n * about the element whose name is being computed.\n */\nexport interface Context {\n  /**\n   * directLabelReference indicates whether the current node\n   * is being visited as a result of being referenced:\n   * (i) by an aria-labelledby\n   * (ii) as a native label\n   * by the previously visited node.\n   */\n  // #SPEC_ASSUMPTION (CON.1) : aria-labelledby and native label\n  // references considered equivalent.\n  directLabelReference?: boolean;\n  /**\n   * 'inherited' object stores any context properties\n   * that are to be passed on to a new 'current node'\n   * from the previous 'current node'.\n   */\n  inherited: {\n    /**\n     * partOfName inidicates whether the current node is\n     * part of the accessible name for another node.\n     * This is true iff the node has been passed recursively\n     * to the algorithm.\n     */\n    // #SPEC_ASSUMPTION (CON.2) : several node context markers\n    // may be considered equivalent.\n    partOfName?: boolean;\n    /**\n     * visitedNodes stores any nodes visited recursively by rule 2F\n     * to ensure that any node is visited at most once. This\n     * prevents infinite cycles during node traversal.\n     */\n    visitedNodes: Node[];\n\n    // TODO: Look into merging 'steps' and 'visitedNodes'\n\n    /**\n     * Keeps track of the details of the name computation, i.e. Rules that were\n     * applied during the name computation algorithm and the node on which the\n     * rule was applied.\n     */\n    steps: ComputationStep[];\n  };\n}\n\n/**\n * Returns a context instance in its default state.\n */\nexport function getDefaultContext(): Context {\n  return {\n    inherited: {\n      visitedNodes: [],\n      steps: [],\n    },\n  };\n}\n"]}