{"version":3,"file":"rule2A.js","sourceRoot":"","sources":["../../src/lib/rule2A.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAIH,yCAAmC;AACnC,iCAAqC;AAErC;;;;;GAKG;AACH,kDAAkD;AAClD,SAAS,QAAQ,CAAC,IAAU;IAC1B,IAAI,CAAC,oBAAa,CAAC,IAAI,CAAC,EAAE;QACxB,OAAO,KAAK,CAAC;KACd;IAED,IAAI,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,UAAU,KAAK,QAAQ,EAAE;QACzD,OAAO,IAAI,CAAC;KACb;IAED,IAAI,kBAAO,CAAC,IAAI,EAAE,+BAA+B,CAAC,KAAK,IAAI,EAAE;QAC3D,OAAO,IAAI,CAAC;KACb;IAED,kEAAkE;IAClE,IAAI,QAAQ,GAAqB,IAAI,CAAC;IACtC,OAAO,QAAQ,KAAK,IAAI,EAAE;QACxB,IAAI,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,OAAO,KAAK,MAAM,EAAE;YACxD,OAAO,IAAI,CAAC;SACb;QACD,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC;KACnC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;;;GAMG;AACH,SAAS,eAAe,CAAC,IAAU,EAAE,OAAgB;IACnD,+DAA+D;IAC/D,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;AACzD,CAAC;AAED;;;;;;;;;;GAUG;AACH,SAAgB,MAAM,CAAC,IAAU,EAAE,CAAiB,EAAE,OAAgB;IAEpE,IAAI,MAAM,GAAG,IAAI,CAAC;IAClB,IAAI,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE;QAClC,MAAM,GAAG,EAAE,CAAC;KACb;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAPD,wBAOC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {Context} from './context';\nimport {AccnameOptions} from './options';\nimport {closest} from './polyfill';\nimport {isHTMLElement} from './util';\n\n/**\n * Looks at a variety of characteristics (CSS, attributes)\n * to determine if 'node' should be considered hidden\n * @param node - node whose hidden-ness is being calculated\n * @return - whether or not the node is considered hidden\n */\n// #SPEC_ASSUMPTION (A.2) : definition of 'hidden'\nfunction isHidden(node: Node): boolean {\n  if (!isHTMLElement(node)) {\n    return false;\n  }\n\n  if (window.getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  if (closest(node, '[hidden],[aria-hidden=\"true\"]') !== null) {\n    return true;\n  }\n\n  // The \"display\" style isn't inherited so check ancestors directly\n  let ancestor: HTMLElement|null = node;\n  while (ancestor !== null) {\n    if (window.getComputedStyle(ancestor).display === 'none') {\n      return true;\n    }\n    ancestor = ancestor.parentElement;\n  }\n\n  return false;\n}\n\n/**\n * Condition for applying rule 2A\n * @param node - The node whose text alternative is being calculated\n * @param context - Additional information relevant to the text alternative\n *     computation for node\n * @return - Whether or not node satisfies the condition for rule 2A\n */\nfunction rule2ACondition(node: Node, context: Context): boolean {\n  // #SPEC_ASSUMPTION (A.1) : definition of 'directly referenced'\n  return isHidden(node) && !context.directLabelReference;\n}\n\n/**\n * Implementation of rule 2A\n * @param node - The element whose text alternative is being calculated\n * @param context - Additional information relevant to the text alternative\n *     computation for node\n * @return - The text alternative string is returned if condition is true,\n * null is returned otherwise, indicating that the condition of this rule was\n * not satisfied.\n *\n * tslint:disable-next-line:enforce-name-casing\n */\nexport function rule2A(node: Node, _: AccnameOptions, context: Context): string|\n    null {\n  let result = null;\n  if (rule2ACondition(node, context)) {\n    result = '';\n  }\n  return result;\n}\n"]}