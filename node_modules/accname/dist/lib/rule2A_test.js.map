{"version":3,"file":"rule2A_test.js","sourceRoot":"","sources":["../../src/lib/rule2A_test.ts"],"names":[],"mappings":"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","sourcesContent":["import {html, render} from 'lit';\n\nimport {createRuleRunner} from '../testing/utils';\n\nimport {getDefaultContext} from './context';\nimport {rule2A as rule2AImpl} from './rule2A';\n\nconst rule2A = createRuleRunner(rule2AImpl);\n\ndescribe('The function for rule 2A', () => {\n  let container: HTMLElement;\n  beforeEach(() => {\n    container = document.createElement('div');\n    document.body.appendChild(container);\n  });\n\n  afterEach(() => {\n    document.body.removeChild(container);\n  });\n\n  it('returns `null` for elements that are not hidden', () => {\n    render(html`<div id=\"foo\">Hello world</div>`, container);\n    const elem = document.getElementById('foo');\n    expect(rule2A(elem!)).toBe(null);\n  });\n\n  it('returns an empty string for hidden elements', () => {\n    render(html`<div id=\"foo\" aria-hidden=\"true\">Hello world</div>`, container);\n    const elem = document.getElementById('foo');\n    expect(rule2A(elem!)).toBe('');\n  });\n\n  it('considers elements with an id that is not referenced somewhere else as hidden',\n     () => {\n       render(html`<div id=\"foo\" hidden>Hello world</div>`, container);\n       const elem = document.getElementById('foo');\n       expect(rule2A(elem!)).toBe('');\n     });\n\n  it('considers elements with an id whose value is referenced by an `aria-labelledby` attribute as not hidden',\n     () => {\n       render(html`<div id=\"foo\" hidden>Hello world</div>`, container);\n       const elem = document.getElementById('foo');\n       const context = getDefaultContext();\n       context.directLabelReference = true;\n       expect(rule2A(elem!, context)).toBe(null);\n     });\n\n  it('considers elements directly referenced by a `label[for]` attribute as not hidden',\n     () => {\n       render(html`<div id=\"foo\" hidden>Hello world</div>`, container);\n       const elem = document.getElementById('foo');\n       const context = getDefaultContext();\n       context.directLabelReference = true;\n       expect(rule2A(elem!, context)).toBe(null);\n     });\n\n  it('considers elements with `style=\"display:none;\"` as hidden', () => {\n    render(\n        html`\n        <div id=\"foo\">Hello world</div>\n        <style>\n          #foo {\n            display: none;\n          }\n        </style>\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2A(elem!)).toBe('');\n  });\n\n  it('considers elements with `style=\"visibility:hidden;\"` as hidden', () => {\n    render(\n        html`\n        <div id=\"foo\">Hello world</div>\n        <style>\n          #foo {\n            visibility: hidden;\n          }\n        </style>\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2A(elem!)).toBe('');\n  });\n\n  it('considers elements with `hidden` ancestors as hidden', () => {\n    render(\n        html`\n        <div hidden>\n          <div>\n            <div>\n              <div id=\"foo\">Hello world</div>\n            </div>\n          </div>\n        </div>\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2A(elem!)).toBe('');\n  });\n\n  it('considers elements with `display:none` ancestors as hidden', () => {\n    render(\n        html`\n        <div id=\"bar\">\n          <div>\n            <div>\n              <div id=\"foo\">Hello world</div>\n            </div>\n          </div>\n        </div>\n        <style>\n          #bar {\n            display: none;\n          }\n        </style>\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2A(elem!)).toBe('');\n  });\n\n  it('considers elements with `visibility:hidden` ancestors as hidden', () => {\n    render(\n        html`\n        <div id=\"bar\">\n          <div>\n            <div>\n              <div id=\"foo\">Hello world</div>\n            </div>\n          </div>\n        </div>\n        <style>\n          #bar {\n            visibility: hidden;\n          }\n        </style>\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2A(elem!)).toBe('');\n  });\n\n  it('considers input elements with zero width and height as not hidden',\n     () => {\n       render(\n           html`<input type=\"radio\" disabled style=\"height: 0; width: 0;\">`,\n           container);\n\n       const target = container.querySelector('input');\n       expect(rule2A(target!)).toBe(null);\n     });\n});\n"]}