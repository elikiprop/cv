/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { ComputeTextAlternative } from './compute_text_alternative';
import { Context } from './context';
import { AccnameOptions } from './options';
/**
 * Get any HTMLElement referenced in the aria-labelledby attribute
 * of 'elem' that exist in the document (i.e is 'valid')
 * @param elem - element whose aria-labelledby attribute is considered
 * @return - An array of any HTMLElement in the document that is referenced
 * by elem's aria-labelledby
 */
export declare function resolveValidAriaLabelledbyIdrefs(elem: HTMLElement): HTMLElement[];
/**
 * Implementation of rule 2B
 * @param node - node whose text alternative is being computed
 * @param context - Additional information relevant to the text alternative
 * computation for node
 * @return - The text alternative string is returned if condition is true,
 * null is returned otherwise, indicating that the condition of this rule was
 * not satisfied.
 */
export declare function rule2B(node: Node, options: AccnameOptions, context: Context, computeTextAlternative: ComputeTextAlternative): string | null;
//# sourceMappingURL=rule2B.d.ts.map