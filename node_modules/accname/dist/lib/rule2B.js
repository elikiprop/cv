"use strict";
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule2B = exports.resolveValidAriaLabelledbyIdrefs = void 0;
const util_1 = require("./util");
/**
 * Get any HTMLElement referenced in the aria-labelledby attribute
 * of 'elem' that exist in the document (i.e is 'valid')
 * @param elem - element whose aria-labelledby attribute is considered
 * @return - An array of any HTMLElement in the document that is referenced
 * by elem's aria-labelledby
 */
function resolveValidAriaLabelledbyIdrefs(elem) {
    var _a, _b;
    const idrefs = (_b = (_a = elem.getAttribute('aria-labelledby')) === null || _a === void 0 ? void 0 : _a.split(' ')) !== null && _b !== void 0 ? _b : [];
    const validElems = [];
    for (const id of idrefs) {
        const elem = document.getElementById(id);
        if (elem) {
            validElems.push(elem);
        }
    }
    return validElems;
}
exports.resolveValidAriaLabelledbyIdrefs = resolveValidAriaLabelledbyIdrefs;
/**
 * Implementation of rule 2B
 * @param node - node whose text alternative is being computed
 * @param context - Additional information relevant to the text alternative
 * computation for node
 * @return - The text alternative string is returned if condition is true,
 * null is returned otherwise, indicating that the condition of this rule was
 * not satisfied.
 */
function rule2B(node, options, context, computeTextAlternative) {
    if (!util_1.isHTMLElement(node)) {
        return null;
    }
    // #SPEC_ASSUMPTION (B.1) : definition of 'part of an aria-labelledby
    // traversal'
    if (context.directLabelReference) {
        return null;
    }
    const labelElems = resolveValidAriaLabelledbyIdrefs(node);
    if (labelElems.length === 0) {
        return null;
    }
    return labelElems
        .map(labelElem => {
        context.inherited.partOfName = true;
        return computeTextAlternative(labelElem, options, {
            directLabelReference: true,
            inherited: context.inherited,
        })
            .name;
    })
        .join(' ')
        .trim();
}
exports.rule2B = rule2B;
//# sourceMappingURL=rule2B.js.map