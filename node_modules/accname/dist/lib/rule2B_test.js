"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lit_1 = require("lit");
const utils_1 = require("../testing/utils");
const context_1 = require("./context");
const rule2B_1 = require("./rule2B");
const rule2B = utils_1.createRuleRunner(rule2B_1.rule2B);
describe('The function for rule 2B', () => {
    let container;
    beforeEach(() => {
        container = document.createElement('div');
        document.body.appendChild(container);
    });
    afterEach(() => {
        document.body.removeChild(container);
    });
    it('returns null if the element has no aria-labelledby attribute', () => {
        lit_1.render(lit_1.html `<div id="foo">Hello</div>`, container);
        const elem = document.getElementById('foo');
        expect(rule2B(elem)).toBe(null);
    });
    it('returns null if the element has no valid aria-labelledby idrefs', () => {
        lit_1.render(lit_1.html `<div id="foo" aria-labelledby="bar">Hello</div>`, container);
        const elem = document.getElementById('foo');
        expect(rule2B(elem)).toBe(null);
    });
    it('returns concatenation of text alternatives of idreffed elements', () => {
        lit_1.render(lit_1.html `
        <div id="foo" aria-labelledby="bar baz">Hello</div>
        <div id="bar"></div>
        <div id="baz"></div>
      `, container);
        const elem = document.getElementById('foo');
        expect(rule2B(elem)).toBe('');
    });
    it('returns null if the node is already part of an aria-labelledby traversal', () => {
        lit_1.render(lit_1.html `
        <div id="foo" aria-labelledby="bar">Hello</div>
        <div id="bar"></div>
      `, container);
        const elem = document.getElementById('foo');
        const context = context_1.getDefaultContext();
        context.directLabelReference = true;
        expect(rule2B(elem, context)).toBe(null);
    });
    it('returns text alternative of aria-labelledby referenced node', () => {
        lit_1.render(lit_1.html `
        <div id="foo" aria-labelledby="bar"></div>
        <div id="bar">Hello</div>
      `, container);
        const elem = document.getElementById('foo');
        expect(rule2B(elem)).toBe('Hello');
    });
    /*
     * TODO: Add tests to check aria-labelledby traversal (using rules 2F, 2G)
     */
});
//# sourceMappingURL=rule2B_test.js.map