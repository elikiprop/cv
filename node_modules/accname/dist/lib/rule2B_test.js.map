{"version":3,"file":"rule2B_test.js","sourceRoot":"","sources":["../../src/lib/rule2B_test.ts"],"names":[],"mappings":";;AAAA,6BAAiC;AAEjC,4CAAkD;AAElD,uCAA4C;AAC5C,qCAA8C;AAE9C,MAAM,MAAM,GAAG,wBAAgB,CAAC,eAAU,CAAC,CAAC;AAE5C,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,IAAI,SAAsB,CAAC;IAC3B,UAAU,CAAC,GAAG,EAAE;QACd,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC1C,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;QACtE,YAAM,CAAC,UAAI,CAAA,2BAA2B,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE,GAAG,EAAE;QACzE,YAAM,CAAC,UAAI,CAAA,iDAAiD,EAAE,SAAS,CAAC,CAAC;QACzE,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE,GAAG,EAAE;QACzE,YAAM,CACF,UAAI,CAAA;;;;OAIL,EACC,SAAS,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0EAA0E,EAC1E,GAAG,EAAE;QACH,YAAM,CACF,UAAI,CAAA;;;OAGR,EACI,SAAS,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,OAAO,GAAG,2BAAiB,EAAE,CAAC;QACpC,OAAO,CAAC,oBAAoB,GAAG,IAAI,CAAC;QACpC,MAAM,CAAC,MAAM,CAAC,IAAK,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACrE,YAAM,CACF,UAAI,CAAA;;;OAGL,EACC,SAAS,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH;;OAEG;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {html, render} from 'lit';\n\nimport {createRuleRunner} from '../testing/utils';\n\nimport {getDefaultContext} from './context';\nimport {rule2B as rule2BImpl} from './rule2B';\n\nconst rule2B = createRuleRunner(rule2BImpl);\n\ndescribe('The function for rule 2B', () => {\n  let container: HTMLElement;\n  beforeEach(() => {\n    container = document.createElement('div');\n    document.body.appendChild(container);\n  });\n\n  afterEach(() => {\n    document.body.removeChild(container);\n  });\n\n  it('returns null if the element has no aria-labelledby attribute', () => {\n    render(html`<div id=\"foo\">Hello</div>`, container);\n    const elem = document.getElementById('foo');\n    expect(rule2B(elem!)).toBe(null);\n  });\n\n  it('returns null if the element has no valid aria-labelledby idrefs', () => {\n    render(html`<div id=\"foo\" aria-labelledby=\"bar\">Hello</div>`, container);\n    const elem = document.getElementById('foo');\n    expect(rule2B(elem!)).toBe(null);\n  });\n\n  it('returns concatenation of text alternatives of idreffed elements', () => {\n    render(\n        html`\n        <div id=\"foo\" aria-labelledby=\"bar baz\">Hello</div>\n        <div id=\"bar\"></div>\n        <div id=\"baz\"></div>\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2B(elem!)).toBe('');\n  });\n\n  it('returns null if the node is already part of an aria-labelledby traversal',\n     () => {\n       render(\n           html`\n        <div id=\"foo\" aria-labelledby=\"bar\">Hello</div>\n        <div id=\"bar\"></div>\n      `,\n           container);\n       const elem = document.getElementById('foo');\n       const context = getDefaultContext();\n       context.directLabelReference = true;\n       expect(rule2B(elem!, context)).toBe(null);\n     });\n\n  it('returns text alternative of aria-labelledby referenced node', () => {\n    render(\n        html`\n        <div id=\"foo\" aria-labelledby=\"bar\"></div>\n        <div id=\"bar\">Hello</div>\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2B(elem!)).toBe('Hello');\n  });\n\n  /*\n   * TODO: Add tests to check aria-labelledby traversal (using rules 2F, 2G)\n   */\n});\n"]}