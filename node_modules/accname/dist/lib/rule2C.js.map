{"version":3,"file":"rule2C.js","sourceRoot":"","sources":["../../src/lib/rule2C.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAKH,qCAAgC;AAChC,iCAAiC;AAEjC;;;;;;;GAOG;AACH,SAAgB,MAAM,CAClB,IAAU,EACV,OAAuB,EACvB,OAAgB,EAChB,sBAA8C;;IAEhD,IAAI,CAAC,gBAAS,CAAC,IAAI,CAAC,EAAE;QACpB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,SAAS,SAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,mCAAI,EAAE,CAAC;IACxD,IAAI,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;QAC3B,OAAO,IAAI,CAAC;KACb;IAED,6DAA6D;IAC7D,qBAAqB;IACrB,IAAI,OAAO,CAAC,SAAS,CAAC,UAAU,EAAE;QAChC,+DAA+D;QAC/D,iCAAiC;QACjC,MAAM,YAAY,GAAG,eAAM,CACvB,IAAI,EAAE,OAAO,EAAE,EAAC,SAAS,EAAE,OAAO,CAAC,SAAS,EAAC,EAAE,sBAAsB,CAAC,CAAC;QAC3E,IAAI,YAAY,KAAK,IAAI,EAAE;YACzB,OAAO,YAAY,CAAC;SACrB;KACF;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AA5BD,wBA4BC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ComputeTextAlternative} from './compute_text_alternative';\nimport {Context} from './context';\nimport {AccnameOptions} from './options';\nimport {rule2E} from './rule2E';\nimport {isElement} from './util';\n\n/**\n * Implementation for rule 2C\n * @param node - node whose text alternative is being computed\n * @param context - information relevant to the computation of node's text\n *     alternative\n * @return text alternative for 'node' if rule 2C accepts 'node', null\n *     otherwise.\n */\nexport function rule2C(\n    node: Node,\n    options: AccnameOptions,\n    context: Context,\n    computeTextAlternative: ComputeTextAlternative,\n    ): string|null {\n  if (!isElement(node)) {\n    return null;\n  }\n\n  const ariaLabel = node.getAttribute('aria-label') ?? '';\n  if (ariaLabel.trim() === '') {\n    return null;\n  }\n\n  // #SPEC_ASSUMPTION (C.1) : 'part of name' implies 'traversal\n  // due to recursion'.\n  if (context.inherited.partOfName) {\n    // 'rule2EResult !== null' indicates that 'node' is an embedded\n    // control as defined in step 2E.\n    const rule2EResult = rule2E(\n        node, options, {inherited: context.inherited}, computeTextAlternative);\n    if (rule2EResult !== null) {\n      return rule2EResult;\n    }\n  }\n\n  return ariaLabel;\n}\n"]}