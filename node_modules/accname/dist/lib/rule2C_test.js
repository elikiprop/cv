"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lit_1 = require("lit");
const utils_1 = require("../testing/utils");
const context_1 = require("./context");
const rule2C_1 = require("./rule2C");
const rule2C = utils_1.createRuleRunner(rule2C_1.rule2C);
describe('The function for rule 2C', () => {
    let container;
    beforeEach(() => {
        container = document.createElement('div');
        document.body.appendChild(container);
    });
    afterEach(() => {
        document.body.removeChild(container);
    });
    it('returns null if node does not contain an aria-label attribute', () => {
        lit_1.render(lit_1.html `<div id="foo"></div>`, container);
        const elem = document.getElementById('foo');
        expect(rule2C(elem)).toBe(null);
    });
    it('returns null if node is not an Element', () => {
        const elem = document.createTextNode('Hello');
        container.appendChild(elem);
        expect(rule2C(elem)).toBe(null);
    });
    it('returns aria-label value if node contains a non-empty aria-label attribute', () => {
        lit_1.render(lit_1.html `<div id="foo" aria-label="hello"></div>`, container);
        const elem = document.getElementById('foo');
        expect(rule2C(elem)).toBe('hello');
    });
    it('returns null if node contains an empty aria-label attribute, when trimmed of whitespace', () => {
        lit_1.render(lit_1.html `<div id="foo" aria-label="   "></div>`, container);
        const elem = document.getElementById('foo');
        expect(rule2C(elem)).toBe(null);
    });
    it('returns aria-label value for SVGElements', () => {
        lit_1.render(lit_1.html `<svg id="foo" aria-label="hello"></svg>`, container);
        const elem = document.getElementById('foo');
        expect(rule2C(elem)).toBe('hello');
    });
    it('returns aria-label value for controls if they are not already part of a name', () => {
        lit_1.render(lit_1.html `
        <input id="foo" aria-label="hello there" type="range" value="5" />
      `, container);
        const elem = document.getElementById('foo');
        expect(rule2C(elem)).toBe('hello there');
    });
    it('returns text alternative for controls if they are part of a name', () => {
        lit_1.render(lit_1.html `
        <input id="foo" aria-label="hello there" type="range" value="5" />
      `, container);
        const elem = document.getElementById('foo');
        const context = context_1.getDefaultContext();
        context.inherited.partOfName = true;
        expect(rule2C(elem, context)).toBe('5');
    });
    it('returns aria-label value for elements that are not controls, even if they are part of a name', () => {
        lit_1.render(lit_1.html `<div id="foo" aria-label="hello there"></div>`, container);
        const elem = document.getElementById('foo');
        const context = context_1.getDefaultContext();
        context.inherited.partOfName = true;
        expect(rule2C(elem, context)).toBe('hello there');
    });
});
//# sourceMappingURL=rule2C_test.js.map