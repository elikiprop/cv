{"version":3,"file":"rule2C_test.js","sourceRoot":"","sources":["../../src/lib/rule2C_test.ts"],"names":[],"mappings":"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","sourcesContent":["import {html, render} from 'lit';\n\nimport {createRuleRunner} from '../testing/utils';\n\nimport {getDefaultContext} from './context';\nimport {rule2C as rule2CImpl} from './rule2C';\n\nconst rule2C = createRuleRunner(rule2CImpl);\n\ndescribe('The function for rule 2C', () => {\n  let container: HTMLElement;\n  beforeEach(() => {\n    container = document.createElement('div');\n    document.body.appendChild(container);\n  });\n\n  afterEach(() => {\n    document.body.removeChild(container);\n  });\n\n  it('returns null if node does not contain an aria-label attribute', () => {\n    render(html`<div id=\"foo\"></div>`, container);\n    const elem = document.getElementById('foo');\n    expect(rule2C(elem!)).toBe(null);\n  });\n\n  it('returns null if node is not an Element', () => {\n    const elem = document.createTextNode('Hello');\n    container.appendChild(elem);\n    expect(rule2C(elem)).toBe(null);\n  });\n\n  it('returns aria-label value if node contains a non-empty aria-label attribute',\n     () => {\n       render(html`<div id=\"foo\" aria-label=\"hello\"></div>`, container);\n       const elem = document.getElementById('foo');\n       expect(rule2C(elem!)).toBe('hello');\n     });\n\n  it('returns null if node contains an empty aria-label attribute, when trimmed of whitespace',\n     () => {\n       render(html`<div id=\"foo\" aria-label=\"   \"></div>`, container);\n       const elem = document.getElementById('foo');\n       expect(rule2C(elem!)).toBe(null);\n     });\n\n  it('returns aria-label value for SVGElements', () => {\n    render(html`<svg id=\"foo\" aria-label=\"hello\"></svg>`, container);\n    const elem = document.getElementById('foo');\n    expect(rule2C(elem!)).toBe('hello');\n  });\n\n  it('returns aria-label value for controls if they are not already part of a name',\n     () => {\n       render(\n           html`\n        <input id=\"foo\" aria-label=\"hello there\" type=\"range\" value=\"5\" />\n      `,\n           container);\n       const elem = document.getElementById('foo');\n       expect(rule2C(elem!)).toBe('hello there');\n     });\n\n  it('returns text alternative for controls if they are part of a name', () => {\n    render(\n        html`\n        <input id=\"foo\" aria-label=\"hello there\" type=\"range\" value=\"5\" />\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    const context = getDefaultContext();\n    context.inherited.partOfName = true;\n    expect(rule2C(elem!, context)).toBe('5');\n  });\n\n  it('returns aria-label value for elements that are not controls, even if they are part of a name',\n     () => {\n       render(html`<div id=\"foo\" aria-label=\"hello there\"></div>`, container);\n       const elem = document.getElementById('foo');\n       const context = getDefaultContext();\n       context.inherited.partOfName = true;\n       expect(rule2C(elem!, context)).toBe('hello there');\n     });\n});"]}