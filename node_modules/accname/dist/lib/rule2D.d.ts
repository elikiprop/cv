/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { ComputeTextAlternative } from './compute_text_alternative';
import { Context } from './context';
import { AccnameOptions } from './options';
/**
 * Process elem's text alternative if elem is an <input>, assuming
 * that no <label> element references elem.
 * @param elem - element whose text alternative is being processed
 * @return - text alternative of elem if elem is an <input>
 */
export declare function getUnlabelledInputText(elem: HTMLInputElement): string | null;
export declare const LABELLABLE_ELEMENT_TYPES: string[];
/**
 * Implementation for rule 2D
 * @param node - the node whose text alternative is being computed
 * @param context - information relevant to the text alternative computation
 * for node
 * @return - text alternative for node if the conditions for applying
 * rule 2D are satisfied, null otherwise.
 */
export declare function rule2D(node: Node, options: AccnameOptions, context: Context, computeTextAlternative: ComputeTextAlternative): string | null;
//# sourceMappingURL=rule2D.d.ts.map