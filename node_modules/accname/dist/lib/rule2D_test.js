"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lit_1 = require("lit");
const utils_1 = require("../testing/utils");
const rule2D_1 = require("./rule2D");
const rule2D = utils_1.createRuleRunner(rule2D_1.rule2D);
describe('The function for rule 2D', () => {
    let container;
    beforeEach(() => {
        container = document.createElement('div');
        document.body.appendChild(container);
    });
    afterEach(() => {
        document.body.removeChild(container);
    });
    it('returns text alternative for native label if present', () => {
        lit_1.render(lit_1.html `
        <input id="foo" type="text" />
        <label for="foo">
          Hello world
        </label>
      `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('Hello world');
    });
    it('does not allow double label traversal', () => {
        lit_1.render(lit_1.html `
        <input id="foo" type="text" />
        <label for="foo" aria-labelledby="bar">
          Hello world
        </label>
        <div id="bar">Hello there</div>
      `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('Hello world');
    });
    it('concatenates label text alternatives for multiple labels', () => {
        lit_1.render(lit_1.html `
        <input id="foo" type="text" />
        <label for="foo">
          Hello
        </label>
        <label for="foo">
          world
        </label>
      `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('Hello world');
    });
    it('recognises label elements that label nested inputs', () => {
        lit_1.render(lit_1.html `
        <label>
          Hello world
          <input id="foo" />
        </label>
      `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('Hello world');
    });
    it('processes multiple <label>s in DOM order.', () => {
        lit_1.render(lit_1.html `
        <label for="foo">Hello</label>
        <label>
          there
          <input id="foo" />
        </label>
        <label for="foo">world!</label>
      `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('Hello there world!');
    });
    it('returns null for elements with role presentation', () => {
        lit_1.render(lit_1.html `
        <input id="foo" type="text" role="presentation" />
        <label for="foo">
          Hello world
        </label>
      `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe(null);
    });
    it('returns null for elements with role none', () => {
        lit_1.render(lit_1.html `
        <input id="foo" type="text" role="none" />
        <label for="foo">
          Hello world
        </label>
      `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe(null);
    });
    it('returns null for elements with implicit role presentation', () => {
        lit_1.render(lit_1.html `<img alt="">`, container);
        const target = container.querySelector('img');
        expect(rule2D(target)).toBe(null);
    });
    it('returns null if node is not a HTMLElement', () => {
        const node = document.createTextNode('Hello');
        expect(rule2D(node)).toBe(null);
    });
    it('returns text alternative of caption element for table, if present', () => {
        lit_1.render(lit_1.html `
        <table id="foo">
          <caption>
            Hello world
          </caption>
        </table>
      `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('Hello world');
    });
    it('returns text alternative of figcaption element for figure, if present', () => {
        lit_1.render(lit_1.html `
        <figure id="foo">
          <figcaption>Hello world</figcaption>
        </figure>
      `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('Hello world');
    });
    it('returns text alternative of legend element for fieldset, if present', () => {
        lit_1.render(lit_1.html `
        <fieldset id="foo">
          <legend>Hello world</legend>
        </fieldset>
      `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('Hello world');
    });
    it('returns alt attribute value for image, if present', () => {
        lit_1.render(lit_1.html ` <img id="foo" alt="Hello world" /> `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('Hello world');
    });
    it('returns alt attribute value for area, if present', () => {
        lit_1.render(lit_1.html ` <area id="foo" alt="Hello world" /> `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('Hello world');
    });
    it('returns null if rule 2D cannot be applied to the given node', () => {
        lit_1.render(lit_1.html ` <div id="foo"></div> `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe(null);
    });
    it('returns input.value for inputs whose value defines alt text', () => {
        lit_1.render(lit_1.html ` <input id="foo" type="button" value="Hello world" /> `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('Hello world');
    });
    it('returns input.type for submit inputs with no value ', () => {
        lit_1.render(lit_1.html ` <input id="foo" type="submit" /> `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('submit');
    });
    it('returns input.type for reset inputs with no value ', () => {
        lit_1.render(lit_1.html ` <input id="foo" type="reset" /> `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('reset');
    });
    it('returns input.alt for image inputs', () => {
        lit_1.render(lit_1.html ` <input id="foo" type="image" alt="Hello world" /> `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('Hello world');
    });
    it('returns Submit Query for image inputs that have no alt nor title attributes', () => {
        lit_1.render(lit_1.html ` <input id="foo" type="image" /> `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('Submit Query');
    });
    it('returns null for inputs whose type isnt specified', () => {
        lit_1.render(lit_1.html ` <input id="foo" /> `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe(null);
    });
    it('returns the text content of a direct child <title> for <svg> elements', () => {
        lit_1.render(lit_1.html ` <svg id="foo"><title>Hello world</title></svg> `, container);
        const elem = document.getElementById('foo');
        expect(rule2D(elem)).toBe('Hello world');
    });
});
//# sourceMappingURL=rule2D_test.js.map