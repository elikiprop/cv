{"version":3,"file":"rule2D_test.js","sourceRoot":"","sources":["../../src/lib/rule2D_test.ts"],"names":[],"mappings":";;AAAA,6BAAiC;AAEjC,4CAAkD;AAElD,qCAA8C;AAE9C,MAAM,MAAM,GAAG,wBAAgB,CAAC,eAAU,CAAC,CAAC;AAE5C,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,IAAI,SAAsB,CAAC;IAC3B,UAAU,CAAC,GAAG,EAAE;QACd,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC1C,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,YAAM,CACF,UAAI,CAAA;;;;;OAKL,EACC,SAAS,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,YAAM,CACF,UAAI,CAAA;;;;;;OAML,EACC,SAAS,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;QAClE,YAAM,CACF,UAAI,CAAA;;;;;;;;OAQL,EACC,SAAS,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,YAAM,CACF,UAAI,CAAA;;;;;OAKL,EACC,SAAS,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,YAAM,CACF,UAAI,CAAA;;;;;;;OAOL,EACC,SAAS,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,YAAM,CACF,UAAI,CAAA;;;;;OAKL,EACC,SAAS,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,YAAM,CACF,UAAI,CAAA;;;;;OAKL,EACC,SAAS,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;QACnE,YAAM,CAAC,UAAI,CAAA,cAAc,EAAE,SAAS,CAAC,CAAC;QAEtC,MAAM,MAAM,GAAG,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,MAAM,CAAC,MAAM,CAAC,MAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC9C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mEAAmE,EACnE,GAAG,EAAE;QACH,YAAM,CACF,UAAI,CAAA;;;;;;OAMR,EACI,SAAS,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,uEAAuE,EACvE,GAAG,EAAE;QACH,YAAM,CACF,UAAI,CAAA;;;;OAIR,EACI,SAAS,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,qEAAqE,EACrE,GAAG,EAAE;QACH,YAAM,CACF,UAAI,CAAA;;;;OAIR,EACI,SAAS,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,YAAM,CAAC,UAAI,CAAA,sCAAsC,EAAE,SAAS,CAAC,CAAC;QAC9D,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,YAAM,CAAC,UAAI,CAAA,uCAAuC,EAAE,SAAS,CAAC,CAAC;QAC/D,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACrE,YAAM,CAAC,UAAI,CAAA,wBAAwB,EAAE,SAAS,CAAC,CAAC;QAChD,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACrE,YAAM,CACF,UAAI,CAAA,wDAAwD,EAC5D,SAAS,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,YAAM,CAAC,UAAI,CAAA,oCAAoC,EAAE,SAAS,CAAC,CAAC;QAC5D,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,YAAM,CAAC,UAAI,CAAA,mCAAmC,EAAE,SAAS,CAAC,CAAC;QAC3D,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C,YAAM,CACF,UAAI,CAAA,qDAAqD,EAAE,SAAS,CAAC,CAAC;QAC1E,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6EAA6E,EAC7E,GAAG,EAAE;QACH,YAAM,CAAC,UAAI,CAAA,mCAAmC,EAAE,SAAS,CAAC,CAAC;QAC3D,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,YAAM,CAAC,UAAI,CAAA,sBAAsB,EAAE,SAAS,CAAC,CAAC;QAC9C,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uEAAuE,EACvE,GAAG,EAAE;QACH,YAAM,CACF,UAAI,CAAA,kDAAkD,EAAE,SAAS,CAAC,CAAC;QACvE,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC","sourcesContent":["import {html, render} from 'lit';\n\nimport {createRuleRunner} from '../testing/utils';\n\nimport {rule2D as rule2DImpl} from './rule2D';\n\nconst rule2D = createRuleRunner(rule2DImpl);\n\ndescribe('The function for rule 2D', () => {\n  let container: HTMLElement;\n  beforeEach(() => {\n    container = document.createElement('div');\n    document.body.appendChild(container);\n  });\n\n  afterEach(() => {\n    document.body.removeChild(container);\n  });\n\n  it('returns text alternative for native label if present', () => {\n    render(\n        html`\n        <input id=\"foo\" type=\"text\" />\n        <label for=\"foo\">\n          Hello world\n        </label>\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe('Hello world');\n  });\n\n  it('does not allow double label traversal', () => {\n    render(\n        html`\n        <input id=\"foo\" type=\"text\" />\n        <label for=\"foo\" aria-labelledby=\"bar\">\n          Hello world\n        </label>\n        <div id=\"bar\">Hello there</div>\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe('Hello world');\n  });\n\n  it('concatenates label text alternatives for multiple labels', () => {\n    render(\n        html`\n        <input id=\"foo\" type=\"text\" />\n        <label for=\"foo\">\n          Hello\n        </label>\n        <label for=\"foo\">\n          world\n        </label>\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe('Hello world');\n  });\n\n  it('recognises label elements that label nested inputs', () => {\n    render(\n        html`\n        <label>\n          Hello world\n          <input id=\"foo\" />\n        </label>\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe('Hello world');\n  });\n\n  it('processes multiple <label>s in DOM order.', () => {\n    render(\n        html`\n        <label for=\"foo\">Hello</label>\n        <label>\n          there\n          <input id=\"foo\" />\n        </label>\n        <label for=\"foo\">world!</label>\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe('Hello there world!');\n  });\n\n  it('returns null for elements with role presentation', () => {\n    render(\n        html`\n        <input id=\"foo\" type=\"text\" role=\"presentation\" />\n        <label for=\"foo\">\n          Hello world\n        </label>\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe(null);\n  });\n\n  it('returns null for elements with role none', () => {\n    render(\n        html`\n        <input id=\"foo\" type=\"text\" role=\"none\" />\n        <label for=\"foo\">\n          Hello world\n        </label>\n      `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe(null);\n  });\n\n  it('returns null for elements with implicit role presentation', () => {\n    render(html`<img alt=\"\">`, container);\n\n    const target = container.querySelector('img');\n    expect(rule2D(target!)).toBe(null);\n  });\n\n  it('returns null if node is not a HTMLElement', () => {\n    const node = document.createTextNode('Hello');\n    expect(rule2D(node)).toBe(null);\n  });\n\n  it('returns text alternative of caption element for table, if present',\n     () => {\n       render(\n           html`\n        <table id=\"foo\">\n          <caption>\n            Hello world\n          </caption>\n        </table>\n      `,\n           container);\n       const elem = document.getElementById('foo');\n       expect(rule2D(elem!)).toBe('Hello world');\n     });\n\n  it('returns text alternative of figcaption element for figure, if present',\n     () => {\n       render(\n           html`\n        <figure id=\"foo\">\n          <figcaption>Hello world</figcaption>\n        </figure>\n      `,\n           container);\n       const elem = document.getElementById('foo');\n       expect(rule2D(elem!)).toBe('Hello world');\n     });\n\n  it('returns text alternative of legend element for fieldset, if present',\n     () => {\n       render(\n           html`\n        <fieldset id=\"foo\">\n          <legend>Hello world</legend>\n        </fieldset>\n      `,\n           container);\n       const elem = document.getElementById('foo');\n       expect(rule2D(elem!)).toBe('Hello world');\n     });\n\n  it('returns alt attribute value for image, if present', () => {\n    render(html` <img id=\"foo\" alt=\"Hello world\" /> `, container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe('Hello world');\n  });\n\n  it('returns alt attribute value for area, if present', () => {\n    render(html` <area id=\"foo\" alt=\"Hello world\" /> `, container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe('Hello world');\n  });\n\n  it('returns null if rule 2D cannot be applied to the given node', () => {\n    render(html` <div id=\"foo\"></div> `, container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe(null);\n  });\n\n  it('returns input.value for inputs whose value defines alt text', () => {\n    render(\n        html` <input id=\"foo\" type=\"button\" value=\"Hello world\" /> `,\n        container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe('Hello world');\n  });\n\n  it('returns input.type for submit inputs with no value ', () => {\n    render(html` <input id=\"foo\" type=\"submit\" /> `, container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe('submit');\n  });\n\n  it('returns input.type for reset inputs with no value ', () => {\n    render(html` <input id=\"foo\" type=\"reset\" /> `, container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe('reset');\n  });\n\n  it('returns input.alt for image inputs', () => {\n    render(\n        html` <input id=\"foo\" type=\"image\" alt=\"Hello world\" /> `, container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe('Hello world');\n  });\n\n  it('returns Submit Query for image inputs that have no alt nor title attributes',\n     () => {\n       render(html` <input id=\"foo\" type=\"image\" /> `, container);\n       const elem = document.getElementById('foo');\n       expect(rule2D(elem!)).toBe('Submit Query');\n     });\n\n  it('returns null for inputs whose type isnt specified', () => {\n    render(html` <input id=\"foo\" /> `, container);\n    const elem = document.getElementById('foo');\n    expect(rule2D(elem!)).toBe(null);\n  });\n\n  it('returns the text content of a direct child <title> for <svg> elements',\n     () => {\n       render(\n           html` <svg id=\"foo\"><title>Hello world</title></svg> `, container);\n       const elem = document.getElementById('foo');\n       expect(rule2D(elem!)).toBe('Hello world');\n     });\n});\n"]}