/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { ComputeTextAlternative } from './compute_text_alternative';
import { Context } from './context';
import { AccnameOptions } from './options';
export declare const TEXT_INPUT_TYPES: string[];
/**
 * Determines whether a given node has role 'textbox' and,
 * if so, gets the value of that textbox.
 * @param node - element whose role is being calculated
 * @return - textbox value if node is a textbox, null otherwise
 * (null indicates that node is not a textbox).
 */
export declare function getValueIfTextbox(node: HTMLElement): string | null;
/**
 * Determines whether a given node has role 'range' and,
 * if so, gets the text alternative for that node.
 * @param node - node whose role is being calculated
 * @return - text alternative for node if node is a 'range',
 * null otherwise (indicating that node is not a range).
 */
export declare function getValueIfRange(node: HTMLElement): string | null;
/**
 * Implementation for rule 2E.
 * @param node - node whose text alternative is being calculated
 * @param context - additional information relevant to the computation of a text
 * alternative for node.
 * @return text alternative for 'node' if rule 2E accepts 'node', null
 *     otherwise.
 */
export declare function rule2E(node: Node, options: AccnameOptions, context: Context, computeTextAlternative: ComputeTextAlternative): string | null;
//# sourceMappingURL=rule2E.d.ts.map