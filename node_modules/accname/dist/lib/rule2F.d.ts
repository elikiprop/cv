/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { ComputeTextAlternative } from './compute_text_alternative';
import { Context } from './context';
import { AccnameOptions } from './options';
/**
 * Checks if the contents of 'elem' with context 'context' should
 * be used in its accesssible name. This is the condition for
 * rule 2F.
 * @param elem - elem whose text alternative is being computed
 * @param context - additional information about the context of elem
 * @return - whether or not rule 2Fs condition has been satisfied
 */
export declare function allowsNameFromContent(elem: HTMLElement, context: Context): boolean;
/**
 * Gets text content generated by CSS pseudo elements for a given HTMLElement
 * @param elem - element whose css generated content is being calculated
 * @param pseudoElementName - the name of the pseudo element whose content is
 * being resolved.
 * @return - css generated content for pseudoElementName if such content exists,
 * empty string otherwise.
 */
export declare function getCssContent(elem: HTMLElement, pseudoElementName: string): string;
export declare const inlineTags: string[];
/**
 * Implementation of rule 2F
 * @param node - node whose text alternative is being calculated
 * @param context - additional info relevant to the calculation of nodes
 * text alternative
 * @return - text alternative for node if the conditions of 2F are satisfied,
 * null otherwise.
 */
export declare function rule2F(node: Node, options: AccnameOptions, context: Context, computeTextAlternative: ComputeTextAlternative): string | null;
export declare const TEST_ONLY: {
    allowsNameFromContent: typeof allowsNameFromContent;
    ALWAYS_NAME_FROM_CONTENT: {
        roles: string[];
        tags: string[];
    };
    SOMETIMES_NAME_FROM_CONTENT: {
        roles: string[];
        tags: string[];
    };
    NEVER_NAME_FROM_CONTENT: {
        roles: string[];
        tags: string[];
    };
};
//# sourceMappingURL=rule2F.d.ts.map