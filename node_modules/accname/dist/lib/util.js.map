{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/lib/util.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAEH;;;GAGG;AACH,SAAgB,WAAW,CAAC,IAAiB;IAC3C,MAAM;IACN,iFAAiF;IACjF,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC;QACjD,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC1B,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;QAC7B,OAAO,IAAI,CAAC;KACb;IAED,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC;QACvD,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC5D,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;QAClC,OAAO,IAAI,CAAC;KACb;IAED,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC;AACjE,CAAC;AAhBD,kCAgBC;AAED,0CAA0C;AAC1C,SAAgB,SAAS,CAAC,CAAO;IAC/B,OAAO,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,CAAC;AAC1C,CAAC;AAFD,8BAEC;AAED,8CAA8C;AAC9C,SAAgB,aAAa,CAAC,CAAO;IACnC,OAAO,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,YAAY,KAAK,8BAA8B,CAAC;AAC3E,CAAC;AAFD,sCAEC;AAED,6CAA6C;AAC7C,SAAgB,YAAY,CAAC,CAAO;IAClC,OAAO,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,YAAY,KAAK,4BAA4B,CAAC;AACzE,CAAC;AAFD,oCAEC;AAYD,SAAgB,UAAU,CAAC,EAAW,EAAE,IAAY;IAClD,OAAO,EAAE,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC;AAC3C,CAAC;AAFD,gCAEC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Calculates whether or not a given element is focusable.\n * @param elem - The element whose focusability is to be calculated.\n */\nexport function isFocusable(elem: HTMLElement): boolean {\n  // See\n  // https://html.spec.whatwg.org/multipage/interaction.html#the-tabindex-attribute\n  if ((hasTagName(elem, 'a') || hasTagName(elem, 'area') ||\n       hasTagName(elem, 'link')) &&\n      elem.hasAttribute('href')) {\n    return true;\n  }\n\n  if ((hasTagName(elem, 'input') || hasTagName(elem, 'select') ||\n       hasTagName(elem, 'textarea') || hasTagName(elem, 'button')) &&\n      !elem.hasAttribute('disabled')) {\n    return true;\n  }\n\n  return elem.hasAttribute('tabindex') || elem.isContentEditable;\n}\n\n/** Whether this `node` is an `Element` */\nexport function isElement(n: Node): n is Element {\n  return n.nodeType === Node.ELEMENT_NODE;\n}\n\n/** Whether this `node` is an `HTMLElement` */\nexport function isHTMLElement(n: Node): n is HTMLElement {\n  return isElement(n) && n.namespaceURI === `http://www.w3.org/1999/xhtml`;\n}\n\n/** Whether this `node` is an `SVGElement` */\nexport function isSVGElement(n: Node): n is SVGElement {\n  return isElement(n) && n.namespaceURI === `http://www.w3.org/2000/svg`;\n}\n\n/**\n * Checks whether the `tagName` of a particular element matches a known\n * tagName. The `tagName` is constrained by the same type mappings that are used\n * in `document.querySelector`, which allows us to constrain the return type as\n * well.\n */\nexport function hasTagName<TagName extends keyof HTMLElementTagNameMap>(\n    el: HTMLElement, name: TagName): el is HTMLElementTagNameMap[TagName];\nexport function hasTagName<TagName extends keyof SVGElementTagNameMap>(\n    el: SVGElement, name: TagName): el is SVGElementTagNameMap[TagName];\nexport function hasTagName(el: Element, name: string): boolean {\n  return el.tagName.toLowerCase() === name;\n}\n"]}