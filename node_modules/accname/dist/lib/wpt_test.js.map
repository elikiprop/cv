{"version":3,"file":"wpt_test.js","sourceRoot":"","sources":["../../src/lib/wpt_test.ts"],"names":[],"mappings":";;AAAA,gEAA0D;AAC1D,0DAAuD;AAEvD,MAAM,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AAE1D,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;IAC1C,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,WAAW,CAAC,gCAAc,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,IAAI,SAAsB,CAAC;IAC3B,UAAU,CAAC,GAAG,EAAE;QACd,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC1C,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,KAAK,MAAM,QAAQ,IAAI,6BAAc,EAAE;QACrC,IAAI,SAAS,IAAI,QAAQ,CAAC,WAAW,EAAE;YACrC,SAAS;SACV;QAED,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,IAAI,EAAE;YAC5B,SAAS,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;YAEzC,2BAA2B;YAC3B,IAAI,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBACvC,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,KAAK,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;aAC7D;YAED,MAAM,IAAI,GAAG,SAAS,CAAC,aAAa,CAAC,OAAO,CAAE,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC,CAAC","sourcesContent":["import {customMatchers} from '../testing/custom_matchers';\nimport {WPT_TEST_CASES} from '../testing/wpt_testdata';\n\nconst isFirefox = navigator.userAgent.includes('Firefox');\n\ndescribe('accname Web Platform Tests', () => {\n  beforeAll(() => {\n    jasmine.addMatchers(customMatchers);\n  });\n\n  let container: HTMLElement;\n  beforeEach(() => {\n    container = document.createElement('div');\n    document.body.appendChild(container);\n  });\n\n  afterEach(() => {\n    document.body.removeChild(container);\n  });\n\n  for (const testcase of WPT_TEST_CASES) {\n    if (isFirefox && testcase.skipFirefox) {\n      continue;\n    }\n\n    it(testcase.title, async () => {\n      container.innerHTML = testcase.htmlInput;\n\n      // Ensure images are loaded\n      if (testcase.htmlInput.includes('<img')) {\n        await new Promise((resolve) => void setTimeout(resolve, 0));\n      }\n\n      const elem = container.querySelector('#test')!;\n      expect(elem).toHaveTextAlernative(testcase.expectedName);\n    });\n  }\n});\n"]}