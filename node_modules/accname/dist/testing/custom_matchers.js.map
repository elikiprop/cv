{"version":3,"file":"custom_matchers.js","sourceRoot":"","sources":["../../src/testing/custom_matchers.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAEH,8EAAwF;AAWxF,qCAAqC;AACxB,QAAA,cAAc,GAAmC;IAC5D,oBAAoB,CAAC,IAA0B;QAC7C,OAAO;YACL,OAAO,CAAC,UAAuB,EAAE,QAAgB;gBAC/C,IAAI,eAAe,CAAC;gBACpB,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;oBAClC,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBAC1C,GAAG,CAAC,SAAS,GAAG,UAAU,CAAC;oBAC3B,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;oBAC/B,eAAe,GAAG,iDAAsB,CAAC,GAAG,CAAC,aAAa,CAAC,OAAO,CAAE,CAAC,CAAC;oBACtE,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;iBAChC;qBAAM;oBACL,eAAe,GAAG,iDAAsB,CAAC,UAAU,CAAC,CAAC;iBACtD;gBAED,OAAO;oBACL,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,CAAC;oBACjD,OAAO,EAAE;;kBAED,QAAQ;gBACV,eAAe,CAAC,IAAI;;;EAGlC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;CAChD;iBACQ,CAAC;YACJ,CAAC;SACF,CAAC;IACJ,CAAC;CACF,CAAC;AAEF,SAAS,SAAS,CAAC,IAAqB;IACtC,OAAO,WAAW,IAAI,CAAC,IAAI,sBAAsB,IAAI,CAAC,IAAI,OACtD,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AAC7B,CAAC;AAED,SAAS,SAAS,CAAC,IAAU;IAC3B,QAAQ,IAAI,CAAC,QAAQ,EAAE;QACrB,KAAK,IAAI,CAAC,SAAS;YACjB,OAAO,SAAU,IAAa,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC;QAChE,KAAK,IAAI,CAAC,YAAY;YACpB,OAAQ,IAAgB,CAAC,SAAS,CAAC;QACrC;YACE,OAAO,kBAAkB,IAAI,GAAG,CAAC;KACpC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ComputationStep, computeTextAlternative} from '../lib/compute_text_alternative';\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace jasmine {\n    interface Matchers<T> {\n      toHaveTextAlernative(expected: string): void;\n    }\n  }\n}\n\n/** Custom helpers for assertions. */\nexport const customMatchers: jasmine.CustomMatcherFactories = {\n  toHaveTextAlernative(util: jasmine.MatchersUtil) {\n    return {\n      compare(nodeOrHtml: Node|string, expected: string) {\n        let textAlternative;\n        if (typeof nodeOrHtml === 'string') {\n          const div = document.createElement('div');\n          div.innerHTML = nodeOrHtml;\n          document.body.appendChild(div);\n          textAlternative = computeTextAlternative(div.querySelector('#test')!);\n          document.body.removeChild(div);\n        } else {\n          textAlternative = computeTextAlternative(nodeOrHtml);\n        }\n\n        return {\n          pass: util.equals(textAlternative.name, expected),\n          message: `Text alternative check failed:\n\nExpected name: \"${expected}\"\nActual name: \"${textAlternative.name}\"\n\nDetails:\n${textAlternative.steps.map(printStep).join('\\n')}\n`\n        };\n      },\n    };\n  },\n};\n\nfunction printStep(step: ComputationStep): string {\n  return ` - Got '${step.text}' by applying rule ${step.rule} on ${\n      serialize(step.node)}`;\n}\n\nfunction serialize(node: Node): string {\n  switch (node.nodeType) {\n    case Node.TEXT_NODE:\n      return `Text(\"${(node as Text).data.replace(/\\n/g, '\\\\n')}\")`;\n    case Node.ELEMENT_NODE:\n      return (node as Element).outerHTML;\n    default:\n      return `{unknown node: ${node}}`;\n  }\n}\n"]}