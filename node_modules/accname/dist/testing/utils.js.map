{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/testing/utils.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAEH,8EAAoE;AACpE,4CAA0D;AAC1D,4CAA4D;AAK5D;;;GAGG;AACH,SAAgB,gBAAgB,CAAC,IAAc;IAC7C,OAAO,CACI,IAAU,EACV,OAAO,GAAG,2BAAiB,EAAE,EAC7B,OAAO,GAAG,sBAAY,CAAC,EAAE,CAAC,EACxB,EAAE;;QACb,MAAM,MAAM,GACR,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,oCAAS,CAAC,yBAAyB,CAAC,CAAC;QACtE,sCAAsC;QACtC,aAAO,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,qCAAM,IAAI,CAAC;IACrD,CAAC,CAAC;AACJ,CAAC;AAXD,4CAWC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {RuleImpl, TEST_ONLY} from '../lib/compute_text_alternative';\nimport {Context, getDefaultContext} from '../lib/context';\nimport {AccnameOptions, withDefaults} from '../lib/options';\n\ntype RuleRunner = (node: Node, context?: Context, options?: AccnameOptions) =>\n    string|null;\n\n/**\n * Helper to abstract over the exact interface of a rule and avoid having to\n * explicitly pass a default context of the textAlternative function.\n */\nexport function createRuleRunner(rule: RuleImpl): RuleRunner {\n  return (\n             node: Node,\n             context = getDefaultContext(),\n             options = withDefaults({}),\n             ) => {\n    const result =\n        rule(node, options, context, TEST_ONLY.computeRawTextAlternative);\n    // Tests expect a trimmed flat string.\n    return result?.replace(/\\s+/g, ' ').trim() ?? null;\n  };\n}\n"]}